<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>seriouszyx</title>
  
  <subtitle>live</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://seriouszyx.top/"/>
  <updated>2018-12-18T12:53:56.000Z</updated>
  <id>https://seriouszyx.top/</id>
  
  <author>
    <name>Yixiang Zhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[总结|展望] 世界不会因为你的无知而停下脚步</title>
    <link href="https://seriouszyx.top/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB/2018/12/10/%E6%80%BB%E7%BB%93-%E5%B1%95%E6%9C%9B-%E4%B8%96%E7%95%8C%E4%B8%8D%E4%BC%9A%E5%9B%A0%E4%B8%BA%E4%BD%A0%E7%9A%84%E6%97%A0%E7%9F%A5%E8%80%8C%E5%81%9C%E4%B8%8B%E8%84%9A%E6%AD%A5.html"/>
    <id>https://seriouszyx.top/大学生活/2018/12/10/总结-展望-世界不会因为你的无知而停下脚步.html</id>
    <published>2018-12-10T14:18:05.000Z</published>
    <updated>2018-12-18T12:53:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Be the greatest, or nothing</strong>。</p><p>不久前接到这学期期末考试的时间安排表，没想到时间过得这么快。在我所认知的世界里，感到时光飞逝大概有两种原因：强烈热衷于某一事物而忘记时间和玩物丧志在不知不觉中荒废时间，我想，我属于后者。</p><p>这学期的我依旧在学习技术、忠于兴趣、力求做到更好，却又懒惰、贪心、自我怀疑、无所适从、对未来没有信心。</p><p>回首看来，我竟然如此疯狂，用这种态度对待生命中最宝贵的时光。</p><a id="more"></a><h2 id="期末安排"><a href="#期末安排" class="headerlink" title="期末安排"></a>期末安排</h2><p>对于本学期最大的弥补，我所能想到的就是好好准备期末考试，把绩点再冲上一个台阶。</p><p>实际上，我是相当讨厌单纯刷绩点这种行为，它大概是初高中应试教育所遗留的糟粕。每个学期，我都会把学习重心放在技术而非学院所开设的课程上，这并非我不重视基础，而是教学安排的确不完全适合我。</p><p>尤其是这学期，开了两门无用的语言课（Java、C#），而且教学质量较差，前几天一个水平较高的同学还跟我哭诉现在还敲不出来像样的 Java 代码。余下三门专业课（数字逻辑、离散、汇编）也平淡无奇，甚至有的老师让我想起了 <strong>PPT Reader</strong> 这个词。 </p><p>相比之下，我一位在相对较好的学校的同学这学期已经对算法和系统都有了不浅的认识，他们的硬件课教材是 CSAPP，作业也大概是 CMU 15-213 的改进版本。</p><p>事实上，现在说刷本学期绩点似乎是个荒唐的事情，毕竟我平时加分少的可怜，甚至旷课被逮到。我能做的，就是尽量在期末的考试中把成绩得到最高，这算是尽力了吧。</p><h2 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h2><p>大二的我开始接触更多的比赛，不过上学期也仅仅在四科竞赛中得到了 Java 组的一个奖项（还不确定）。是时候为我的简历增些光彩了，所以我报名了蓝桥杯的团队赛和个人赛，并开始了解 PAT。</p><p>假期我会以准备比赛和提升英语技能为主，尤其是个人赛，我计划尽力拿到国家级的奖项，团体赛目前不是特别了解，不好立 flag。在经历了四级的失望后，我决心拿出大量时间准备英语，特别是听力方面，假期我会进行一些安排。</p><p>包括下学期的几个比赛，大学生英语竞赛、数学建模校赛，我都会着手准备，并力争靠前的名次。</p><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p>讲真，作为走开发路线的我，目前的进展可以算得上很慢了。刚刚把 JavaWeb 的生态熟悉了一遍，可惜院里 Java 的项目太少，也没有得到合适的锻炼机会。不过下学期即便没有好的机会，我也会主动联系老师，真的不能再等了。</p><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>大二接下来的日子对我大学生涯意义重大，我希望可以通过这段时间证明自己，暂时我不会再好高骛远，而是着手应对当下，我希望在大二结束的那一刻，再翻看这篇文章，能做到问心无愧。</p><blockquote><p>要像疯马一样奔跑，快，再快，没有人会等你，弗莱切说得很对，这世上最伤人的句子就是 Good job。<br>  Good job，哦，我做的还不错，我差不多可以了。<br>不不不！愿没有，你远未愤怒，也远未觉悟，你那些梦想和努力，不过是廉价童话里说说而已。</p><p>我们根本就没有努力到与人拼天赋的地位，而我们却像当然的，以为我们的失败只是因为缺乏运气。<br>我们就是弗莱切嘴里的 Mother fucker，而我们仍然沾沾自喜。<br>这世上的伟大，世上的成功，哪有一蹴而就。<br>所谓峰回路转，崖下秘籍，都是故事里哄骗读者的伎俩，而真实的世界，是要见血的。</p><p>残酷的励志，励志与鸡汤本来就是两种东西，真实的励志。就是打倒了，爬起来，浑身是血，又聋又瞎，成功的最后，很可能什么也得不到。<br>很可能，你也将早早死去。<br>但烈火是你点的，你说要烧一座山，就要做好烧死自己的觉悟。<br>大火降至。<br>Be the greatest, or nothing。</p><p>——朱炫  《爆裂鼓手》影评</p></blockquote><p><img src="https://i.loli.net/2018/12/10/5c0e74b9d6e0b.jpg" alt="" style="width:100%"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Be the greatest, or nothing&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;不久前接到这学期期末考试的时间安排表，没想到时间过得这么快。在我所认知的世界里，感到时光飞逝大概有两种原因：强烈热衷于某一事物而忘记时间和玩物丧志在不知不觉中荒废时间，我想，我属于后者。&lt;/p&gt;
&lt;p&gt;这学期的我依旧在学习技术、忠于兴趣、力求做到更好，却又懒惰、贪心、自我怀疑、无所适从、对未来没有信心。&lt;/p&gt;
&lt;p&gt;回首看来，我竟然如此疯狂，用这种态度对待生命中最宝贵的时光。&lt;/p&gt;
    
    </summary>
    
      <category term="大学生活" scheme="https://seriouszyx.top/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="大学生活" scheme="https://seriouszyx.top/tags/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB/"/>
    
      <category term="总结" scheme="https://seriouszyx.top/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>就决定是你了 | 为你的终端安装 Pokemon 皮肤</title>
    <link href="https://seriouszyx.top/%E6%8A%98%E8%85%BE/2018/11/27/%E5%B0%B1%E5%86%B3%E5%AE%9A%E6%98%AF%E4%BD%A0%E4%BA%86-%E4%B8%BA%E4%BD%A0%E7%9A%84%E7%BB%88%E7%AB%AF%E5%AE%89%E8%A3%85-Pokemon-%E7%9A%AE%E8%82%A4.html"/>
    <id>https://seriouszyx.top/折腾/2018/11/27/就决定是你了-为你的终端安装-Pokemon-皮肤.html</id>
    <published>2018-11-27T04:21:08.000Z</published>
    <updated>2018-11-27T05:38:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>正值精灵宝可梦大热时期，在逛 GitHub 时发现了一个特别强的东西 —— <a href="https://github.com/LazoCoder/Pokemon-Terminal" target="_blank" rel="noopener">Pokemon-Terminal</a>，经过一顿折腾后，终于把终端打造成了这个样子 👇</p><p><img src="http://pi0evhi68.bkt.clouddn.com/A5592C04-B48F-47E4-BBB8-3BA763D5F668.png" alt="" style="width:100%"></p><a id="more"></a><h2 id="Pokemon-Terminal"><a href="#Pokemon-Terminal" class="headerlink" title="Pokemon-Terminal"></a>Pokemon-Terminal</h2><p>正值精灵宝可梦大热时期，在逛 GitHub 时发现了一个特别强的东西 —— <a href="https://github.com/LazoCoder/Pokemon-Terminal" target="_blank" rel="noopener">Pokemon-Terminal</a></p><p>这是一款美化终端的神器，将口袋妖怪与终端完美结合，先上几张图让大家感受一下：</p><p><img src="http://pi0evhi68.bkt.clouddn.com/Pokemon Terminal README md at master · LazoCoder Pokemon Terminal.png" alt="Pokemon Terminal README md at master · LazoCoder Pokemon Terminal"></p><p>它拥有 719 款 Pokemon 皮肤，可以根据编号或口袋妖怪名字（例如 pikachu）改变，支持 iTerm2、ConEmu、Terminology、Tilix 等终端，同时支持 Windows、MacOS、GNOME、Openbox 和 i3wm。</p><p>如果你也是个口袋迷，那么快来给你的终端安上这款皮肤吧！</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>本项目的 README 上有各种安装方法，这里以 macOS 为例。</p><p>首先确保你的电脑已经安装 3.6 及以上版本的 python（最好是 3.6），下面是下载地址</p><ul><li><a href="https://www.python.org/downloads/mac-osx/" target="_blank" rel="noopener">For Mac</a></li><li><a href="https://www.python.org/downloads/windows/" target="_blank" rel="noopener">For Windows</a></li><li><a href="https://askubuntu.com/a/865569" target="_blank" rel="noopener">For Ubuntu</a></li><li><a href="https://www.archlinux.org/packages/extra/x86_64/python/" target="_blank" rel="noopener">For Arch Linux</a></li></ul><p>确保有以下终端模拟器中的一种（我用的是 iTerm2）</p><ul><li><a href="https://iterm2.com/" target="_blank" rel="noopener">iTerm2</a></li><li><a href="https://conemu.github.io/" target="_blank" rel="noopener">ConEmu</a> or derivative (such as <a href="http://cmder.net/" target="_blank" rel="noopener">Cmder</a>)</li><li><a href="https://www.enlightenment.org/about-terminology" target="_blank" rel="noopener">Terminology</a></li><li><a href="https://gnunn1.github.io/tilix-web/" target="_blank" rel="noopener">Tilix</a></li></ul><p>可以使用以下几种方式安装</p><ul><li><a href="https://aur.archlinux.org/packages/pokemon-terminal-git/" target="_blank" rel="noopener">Arch Linux User Repository package (System-wide)</a> </li><li><a href="#pip-system-wide">pip (System-wide)</a></li><li><a href="#pip-per-user">pip (Per-User)</a></li><li><a href="#npm-per-user">npm (Per-User)</a></li><li><a href="#distutils-system-wide">Distutils (System-wide)</a></li></ul><p>这里我使用 npm 安装（确保有 node.js），因为比较简单。</p><p>在 iTerm 2 中输入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global pokemon-terminal</span><br></pre></td></tr></table></figure><p>好了，这就安装成功了，是不是非常简单！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pokemon pikachu</span><br></pre></td></tr></table></figure><p>皮卡丘，就决定是你了!</p><h2 id="深度使用"><a href="#深度使用" class="headerlink" title="深度使用"></a>深度使用</h2><p>每次启动都想<code>自动随机</code>更换皮肤的话，可以像这样设置：</p><p><img src="http://pi0evhi68.bkt.clouddn.com/3806757A-C9B3-41AD-8D70-637CC9DFFF29.png" alt="3806757A-C9B3-41AD-8D70-637CC9DFFF29"></p><p>还有原项目给出的使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">usage: pokemon [-h] [-n NAME]</span><br><span class="line">               [-r [&#123;kanto,johto,hoenn,sinnoh,unova,kalos&#125; [&#123;kanto,johto,hoenn,sinnoh,unova,kalos&#125; ...]]]</span><br><span class="line">               [-l [0.xx]] [-d [0.xx]]</span><br><span class="line">               [-t [&#123;normal,fire,fighting,water,flying,grass,poison,electric,ground,psychic,rock,ice,bug,dragon,ghost,dark,steel,fairy&#125; [&#123;normal,fire,fighting,water,flying,grass,poison,electric,ground,psychic,rock,ice,bug,dragon,ghost,dark,steel,fairy&#125; ...]]]</span><br><span class="line">               [-ne] [-e] [-ss [X]] [-w] [-v] [-dr] [-c]</span><br><span class="line">               [id]</span><br><span class="line"></span><br><span class="line">Set a pokemon to the current terminal background or wallpaper</span><br><span class="line"></span><br><span class="line">positional arguments:</span><br><span class="line">  id                    Specify the wanted pokemon ID or the exact (case</span><br><span class="line">                        insensitive) name</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  -c, --clear           Clears the current pokemon from terminal background</span><br><span class="line">                        and quits.</span><br><span class="line"></span><br><span class="line">Filters:</span><br><span class="line">  Arguments used to filter the list of pokemons with various conditions that</span><br><span class="line">  then will be picked</span><br><span class="line"></span><br><span class="line">  -n NAME, --name NAME  Filter by pokemon which name contains NAME</span><br><span class="line">  -r [&#123;kanto,johto,hoenn,sinnoh,unova,kalos&#125; [&#123;kanto,johto,hoenn,sinnoh,unova,kalos&#125; ...]], --region [&#123;kanto,johto,hoenn,sinnoh,unova,kalos&#125; [&#123;kanto,johto,hoenn,sinnoh,unova,kalos&#125; ...]]</span><br><span class="line">                        Filter the pokemons by region</span><br><span class="line">  -l [0.xx], --light [0.xx]</span><br><span class="line">                        Filter out the pokemons darker (lightness threshold</span><br><span class="line">                        lower) then 0.xx (default is 0.7)</span><br><span class="line">  -d [0.xx], --dark [0.xx]</span><br><span class="line">                        Filter out the pokemons lighter (lightness threshold</span><br><span class="line">                        higher) then 0.xx (default is 0.42)</span><br><span class="line">  -t [&#123;normal,fire,fighting,water,flying,grass,poison,electric,ground,psychic,rock,ice,bug,dragon,ghost,dark,steel,fairy&#125; [&#123;normal,fire,fighting,water,flying,grass,poison,electric,ground,psychic,rock,ice,bug,dragon,ghost,dark,steel,fairy&#125; ...]], --type [&#123;normal,fire,fighting,water,flying,grass,poison,electric,ground,psychic,rock,ice,bug,dragon,ghost,dark,steel,fairy&#125; [&#123;normal,fire,fighting,water,flying,grass,poison,electric,ground,psychic,rock,ice,bug,dragon,ghost,dark,steel,fairy&#125; ...]]</span><br><span class="line">                        Filter the pokemons by type.</span><br><span class="line">  -ne, --no-extras      Excludes extra pokemons (from the extras folder)</span><br><span class="line">  -e, --extras          Excludes all non-extra pokemons</span><br><span class="line"></span><br><span class="line">Misc:</span><br><span class="line">  -ss [X], --slideshow [X]</span><br><span class="line">                        Instead of simply choosing a random pokemon from the</span><br><span class="line">                        filtered list, starts a slideshow (with X minutes of</span><br><span class="line">                        delay between pokemon) in the background with the</span><br><span class="line">                        pokemon that matched the filters</span><br><span class="line">  -w, --wallpaper       Changes the desktop wallpaper instead of the terminal</span><br><span class="line">                        background</span><br><span class="line">  -v, --verbose         Enables verbose output</span><br><span class="line">  -dr, --dry-run        Implies -v and doesn&apos;t actually changes either</span><br><span class="line">                        wallpaper or background after the pokemon has been</span><br><span class="line">                        chosen</span><br><span class="line"></span><br><span class="line">Not setting any filters will get a completely random pokemon</span><br></pre></td></tr></table></figure><p>举几个例子，可以根据口袋妖怪的名字改变皮肤</p><p><img src="https://i.imgur.com/DfA2lcd.gif" alt=""></p><p>同一款皮肤（部分）还可以改变不同的形态</p><p><img src="https://i.imgur.com/gdGUucu.gif" alt=""></p><p>还可以自定义图片之类的，自己摸索吧。</p><h2 id="终端美化"><a href="#终端美化" class="headerlink" title="终端美化"></a>终端美化</h2><p>作者建议更改终端默认的透明度的模糊程度，以达到更好的效果，可以像这样设置：</p><p><img src="https://i.imgur.com/xSZAGhL.png" alt=""></p><p>设置之后就会变成这个样子：</p><p><img src="https://i.imgur.com/82DAT97.jpg" alt=""></p><p>iTerm 2 的默认功能还是不够强大，可以配置 oh-my-zsh，安装字体库、插件等，如果有需要可以参考这篇文章 <a href="https://segmentfault.com/a/1190000014992947" target="_blank" rel="noopener">iTerm2 + Oh My Zsh 打造舒适终端体验</a>。</p><p>最后，安装配置了 iTerm 2 + oh-my-zsh + Pokemon-Terminal，你就拥有了像下面一样的终端。</p><p><img src="http://pi0evhi68.bkt.clouddn.com/404B150B-328D-4038-B142-06C0CDDEC40A.png" alt="404B150B-328D-4038-B142-06C0CDDEC40A"></p><p>Have fun !</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正值精灵宝可梦大热时期，在逛 GitHub 时发现了一个特别强的东西 —— &lt;a href=&quot;https://github.com/LazoCoder/Pokemon-Terminal&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Pokemon-Terminal&lt;/a&gt;，经过一顿折腾后，终于把终端打造成了这个样子 👇&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pi0evhi68.bkt.clouddn.com/A5592C04-B48F-47E4-BBB8-3BA763D5F668.png&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="折腾" scheme="https://seriouszyx.top/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="折腾" scheme="https://seriouszyx.top/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="Linux" scheme="https://seriouszyx.top/tags/Linux/"/>
    
      <category term="终端" scheme="https://seriouszyx.top/tags/%E7%BB%88%E7%AB%AF/"/>
    
      <category term="美化" scheme="https://seriouszyx.top/tags/%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>IoC容器浅析及简单实现</title>
    <link href="https://seriouszyx.top/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/2018/11/25/IoC%E5%AE%B9%E5%99%A8%E6%B5%85%E6%9E%90%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0.html"/>
    <id>https://seriouszyx.top/技术相关/2018/11/25/IoC容器浅析及简单实现.html</id>
    <published>2018-11-25T06:43:04.000Z</published>
    <updated>2018-11-25T10:23:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spring IoC 容器是 Spring 框架中最核心的部分，也是初学者难以理解的部分，对于这种关键的设计，简单实现一次能最大限度地加深理解，了解其中思想，对以后的开发也大有裨益。</p><a id="more"></a><h1 id="Spring-IoC-容器浅析及简单实现"><a href="#Spring-IoC-容器浅析及简单实现" class="headerlink" title="Spring IoC 容器浅析及简单实现"></a>Spring IoC 容器浅析及简单实现</h1><h2 id="Spring-IoC-概述"><a href="#Spring-IoC-概述" class="headerlink" title="Spring IoC 概述"></a>Spring IoC 概述</h2><p>原生的 JavaEE 技术中各个模块之间的联系较强，即<code>耦合度较高</code>。</p><p>比如完成一个用户的创建事务，视图层会创建业务逻辑层的对象，再在内部调用对象的方法，各个模块的<code>独立性很差</code>，如果某一模块的代码发生改变，其他模块的改动也会很大。</p><p>而 Spring 框架的核心——IoC（控制反转）很好的解决了这一问题。控制反转，即<code>某一接口具体实现类的选择控制权从调用类中移除，转交给第三方决定</code>，即由 Spring 容器借由 Bean 配置来进行控制。</p><p>可能 IoC 不够开门见山，理解起来较为困难。因此， Martin Fowler 提出了 DI（Dependency Injection，依赖注入）的概念来替代 IoC，即<code>让调用类对某一接口实现类的依赖关系由第三方（容器或写协作类）注入，以移除调用类对某一接口实现类的依赖</code>。</p><p>比如说， 上述例子中，视图层使用业务逻辑层的接口变量，而不需要真正 new 出接口的实现，这样即使接口产生了新的实现或原有实现修改，视图层都能正常运行。</p><p>从注入方法上看，IoC 主要划分为三种类型：构造函数注入、属性注入和接口注入。在开发过程中，一般使用<code>属性注入</code>的方法。</p><p>IoC 不仅可以实现<code>类之间的解耦</code>，还能帮助完成<code>类的初始化与装配工作</code>，让开发者从这些底层实现类的实例化、依赖关系装配等工作中解脱出出来，专注于更有意义的业务逻辑开发工作。</p><h2 id="Spring-IoC-简单实现"><a href="#Spring-IoC-简单实现" class="headerlink" title="Spring IoC 简单实现"></a>Spring IoC 简单实现</h2><p>下面实现了一个IoC容器的核心部分，简单模拟了IoC容器的基本功能。</p><p>下面列举出核心类：</p><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Student</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 学生实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Yixiang Zhao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/9/22 9:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">intro</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"My name is "</span> + name + <span class="string">" and I'm "</span> + gender + <span class="string">" ."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StuService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> StuService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 学生Service</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Yixiang Zhao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/9/22 9:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StuService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Student student;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudent</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.student = student;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"Student"</span> <span class="attr">class</span>=<span class="string">"me.seriouszyx.pojo.Student"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"ZYX"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"man"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"StuService"</span> <span class="attr">class</span>=<span class="string">"me.seriouszyx.service.StuService"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">ref</span>=<span class="string">"Student"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面是核心类 ClassPathXMLApplicationContext.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> ClassPathXMLApplicationContext</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> ApplicationContext的实现，核心类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Yixiang Zhao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/9/22 9:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassPathXMLApplicationContext</span> <span class="keyword">implements</span> <span class="title">ApplicationContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassPathXMLApplicationContext</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Document document = getDocument(location);</span><br><span class="line">            XMLParsing(document);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载资源文件，转换成Document类型</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Document <span class="title">getDocument</span><span class="params">(String location)</span> <span class="keyword">throws</span> JDOMException, IOException </span>&#123;</span><br><span class="line">        SAXBuilder saxBuilder = <span class="keyword">new</span> SAXBuilder();</span><br><span class="line">        <span class="keyword">return</span> saxBuilder.build(<span class="keyword">this</span>.getClass().getClassLoader().getResource(location));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">XMLParsing</span><span class="params">(Document document)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取XML文件根元素beans</span></span><br><span class="line">        Element beans = document.getRootElement();</span><br><span class="line">        <span class="comment">// 获取beans下的bean集合</span></span><br><span class="line">        List beanList = beans.getChildren(<span class="string">"bean"</span>);</span><br><span class="line">        <span class="comment">// 遍历beans集合</span></span><br><span class="line">        <span class="keyword">for</span> (Iterator iter = beanList.iterator(); iter.hasNext(); ) &#123;</span><br><span class="line">            Element bean = (Element) iter.next();</span><br><span class="line">            <span class="comment">// 获取bean的属性id和class，id为类的key值，class为类的路径</span></span><br><span class="line">            String id = bean.getAttributeValue(<span class="string">"id"</span>);</span><br><span class="line">            String className = bean.getAttributeValue(<span class="string">"class"</span>);</span><br><span class="line">            <span class="comment">// 动态加载该bean代表的类</span></span><br><span class="line">            Object obj = Class.forName(className).newInstance();</span><br><span class="line">            <span class="comment">// 获得该类的所有方法</span></span><br><span class="line">            Method[] methods = obj.getClass().getDeclaredMethods();</span><br><span class="line">            <span class="comment">// 获取该节点的所有子节点，子节点存储类的初始化参数</span></span><br><span class="line">            List&lt;Element&gt; properties = bean.getChildren(<span class="string">"property"</span>);</span><br><span class="line">            <span class="comment">// 遍历，将初始化参数和类的方法对应，进行类的初始化</span></span><br><span class="line">            <span class="keyword">for</span> (Element pro : properties) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methods.length; i++) &#123;</span><br><span class="line">                    String methodName = methods[i].getName();</span><br><span class="line">                    <span class="keyword">if</span> (methodName.startsWith(<span class="string">"set"</span>)) &#123;</span><br><span class="line">                        String classProperty = methodName.substring(<span class="number">3</span>, methodName.length()).toLowerCase();</span><br><span class="line">                        <span class="keyword">if</span> (pro.getAttribute(<span class="string">"name"</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (classProperty.equals(pro.getAttribute(<span class="string">"name"</span>).getValue())) &#123;</span><br><span class="line">                                methods[i].invoke(obj, pro.getAttribute(<span class="string">"value"</span>).getValue());</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            methods[i].invoke(obj, map.get(pro.getAttribute(<span class="string">"ref"</span>).getValue()));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将初始化完成的对象添加到HashMap中</span></span><br><span class="line">            map.put(id, obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyIoCTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXMLApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">        StuService stuService = (StuService) context.getBean(<span class="string">"StuService"</span>);</span><br><span class="line">        stuService.getStudent().intro();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试成功！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">My name is ZYX and I&apos;m man .</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>代码在我的 <a href="https://github.com/seriouszyx/LearnSpring/tree/master/mycode/SimpleIoC" target="_blank" rel="noopener">GitHub</a>开源，欢迎一起交流讨论。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>熟悉一个框架最好的方式，就是亲手实现它。这样不仅会深刻地认识到框架的工作原理，以后的使用也会更加得心应手。</p><p>此外，在实现的过程中，又会收获很多东西，就像实现 IoC 容器一样，不仅了解解析 XML 文件的 JDOM 工具，还加深了对 Java 反射的理解。在实际开发中，几乎没有任何地方需要用到反射这一技术，但在框架实现过程中，不懂反射则寸步难行。</p><blockquote><p>   更多的 Spring 学习心得请戳<a href="https://github.com/seriouszyx/LearnSpring" target="_blank" rel="noopener">Spring 框架学习</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring IoC 容器是 Spring 框架中最核心的部分，也是初学者难以理解的部分，对于这种关键的设计，简单实现一次能最大限度地加深理解，了解其中思想，对以后的开发也大有裨益。&lt;/p&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://seriouszyx.top/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="JavaWeb" scheme="https://seriouszyx.top/tags/JavaWeb/"/>
    
      <category term="Java" scheme="https://seriouszyx.top/tags/Java/"/>
    
  </entry>
  
</feed>
